/*!
 * \file IVoltageSource.h
 * \brief Definition of IVoltageSource interface.
 * \author Konstantin Androsov <konstantin.androsov@gmail.com>
 */

#pragma once

#include "psi/units.h"

namespace psi {

/*!
 * \brief Interface to operate with voltage source that is also capable to measure set voltage and current.
 */
class IVoltageSource {
public:
    /*!
     * \brief Measurement result container.
     */
    struct Measurement {
        /// Current in Amperes.
        ElectricCurrent Current;

        /// Voltage in Volts.
        ElectricPotential Voltage;

        /// Indicates if device is in compliance mode.
        bool Compliance;

        /// Default constructor.
        Measurement() : Current(0.0 * psi::amperes), Voltage(0.0 * psi::volts), Compliance(false) {}

        /// Constructor.
        Measurement(ElectricCurrent current, ElectricPotential voltage, bool compliance)
            : Current(current), Voltage(voltage), Compliance(compliance) {}
    };

    /*!
     * \brief Represents a value with setup parameters that can be generated by the IVoltageSource
     */
    struct Value {
        /// Voltage in Volts.
        ElectricPotential Voltage;

        /// Compliance value in Amperes.
        ElectricCurrent Compliance;

        /// Default constructor.
        Value() : Voltage(0.0 * psi::volts), Compliance(0.0 * psi::amperes) {}

        /// Constructor.
        Value(ElectricPotential voltage, ElectricCurrent compliance) : Voltage(voltage), Compliance(compliance) {}

        /// Comparison operator 'equal'.
        bool operator==(const Value& other) const {
            return Voltage == other.Voltage && Compliance == other.Compliance;
        }

        /// Comparison operator 'not equal'.
        bool operator!=(const Value& other) const {
            return !(*this == other);
        }
    };

public:
    /*!
     * \brief Set voltage on the source using default compliance value.
     * \param value - desired voltage and setup parameters
     * \return Voltage and setup parameters that were really set on the device. It can be different from 'value' \
     *         due to the device limitations.
     */
    virtual Value Set(const Value& value) = 0;

    /*!
     * \brief Returns the voltage source accuracy to set provided voltage value.
     * \param voltage - desired voltage value.
     * \return voltage source accuracy
     */
    virtual ElectricPotential Accuracy(const ElectricPotential& voltage) = 0;

    /*!
     * \brief Perform measurement of voltage and current.
     * \return Measuremnet result.
     */
    virtual Measurement Measure() = 0;

    /// Turn the voltage off.
    virtual void Off() = 0;

    /// IHighVoltageSource virtual destructor
    virtual ~IVoltageSource() {}
};

}

extern std::ostream& operator << (std::ostream& s, const psi::IVoltageSource::Measurement& m);
extern std::ostream& operator << (std::ostream& s, const psi::IVoltageSource::Value& v);
