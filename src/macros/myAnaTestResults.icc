void MyAnaTestResults::Loop()
{
  if (fChain == 0) return;
  Long64_t nentries = fChain->GetEntriesFast();
  Long64_t nbytes = 0, nb = 0;
  for (Long64_t jentry=0; jentry<nentries;jentry++) {
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;


    // -- Call user function
    Analyze();
  }
}

MyAnaTestResults::MyAnaTestResults(TTree *tree)
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {

     cout << "MyAnaTestResults: You must instantiate with a tree or chain" << endl;

   }

   cout << "Chain has " << tree->GetEntries() << " files" << endl;
   Init(tree);

}

MyAnaTestResults::~MyAnaTestResults()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();

   // -- dump user histograms
   if (!fFile) return;
   fFile->cd();
   fFile->Write();
   fFile->Close();

}

Int_t MyAnaTestResults::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t MyAnaTestResults::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->IsA() != TChain::Class()) return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent) {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void MyAnaTestResults::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normaly not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("nmod",&moduleNr);
   fChain->SetBranchAddress("grade",&grade);
   fChain->SetBranchAddress("finalGrade",&finalGrade);
   fChain->SetBranchAddress("overallGrade",&overallGrade);
   fChain->SetBranchAddress("shortGrade",&shortGrade);
   fChain->SetBranchAddress("halfModule",&halfModule);
   fChain->SetBranchAddress("allTestsDone",&allTestsDone);
   fChain->SetBranchAddress("date",&date);
   fChain->SetBranchAddress("hour",&hour);
   fChain->SetBranchAddress("minute",&minute);
   fChain->SetBranchAddress("tbmError1",&tbmError1);
   fChain->SetBranchAddress("tbmError2",&tbmError2);
   fChain->SetBranchAddress("ia",&ia);
   fChain->SetBranchAddress("id",&id);
   fChain->SetBranchAddress("va",&va);
   fChain->SetBranchAddress("vd",&vd);
   fChain->SetBranchAddress("iv100",&iv100);
   fChain->SetBranchAddress("iv150",&iv150);
   fChain->SetBranchAddress("ivSlope",&ivSlope);
   fChain->SetBranchAddress("ivv",ivv);
   fChain->SetBranchAddress("ivi",ivi);
   fChain->SetBranchAddress("temperatureVoltage",temperatureVoltage);
   fChain->SetBranchAddress("nRocsB",nRocsB);
   fChain->SetBranchAddress("nRocsC",nRocsC);
   fChain->SetBranchAddress("trims",trims);
   fChain->SetBranchAddress("uthrM",uthrM);
   fChain->SetBranchAddress("uthrR",uthrR);
   fChain->SetBranchAddress("uthr",uthr);
   fChain->SetBranchAddress("tthrM",tthrM);
   fChain->SetBranchAddress("tthrR",tthrR);
   fChain->SetBranchAddress("tthr",tthr);
   fChain->SetBranchAddress("bumpThrDiff",bumpThrDiff);
   fChain->SetBranchAddress("noiseM",noiseM);
   fChain->SetBranchAddress("noiseR",noiseR);
   fChain->SetBranchAddress("noise",noise);
   fChain->SetBranchAddress("gainM",gainM);
   fChain->SetBranchAddress("gainR",gainR);
   fChain->SetBranchAddress("pedM",pedM);
   fChain->SetBranchAddress("pedR",pedR);
   fChain->SetBranchAddress("gain",gain);
   fChain->SetBranchAddress("ph",ph);
   fChain->SetBranchAddress("tanhFit",tanhFit);
   fChain->SetBranchAddress("ped",ped);
   fChain->SetBranchAddress("addlvl",addlvl);
   fChain->SetBranchAddress("pixmap",pixmap);
   fChain->SetBranchAddress("defects",defects);
   fChain->SetBranchAddress("vdig",vdig);
   fChain->SetBranchAddress("vana",vana);
   fChain->SetBranchAddress("vsf",vsf);
   fChain->SetBranchAddress("vcomp",vcomp);
   fChain->SetBranchAddress("vleak_comp",vleak_comp);
   fChain->SetBranchAddress("vrgpr",vrgpr);
   fChain->SetBranchAddress("vwllpr",vwllpr);
   fChain->SetBranchAddress("vrgsh",vrgsh);
   fChain->SetBranchAddress("vwllsh",vwllsh);
   fChain->SetBranchAddress("vhlddel",vhlddel);
   fChain->SetBranchAddress("vtrim",vtrim);
   fChain->SetBranchAddress("vthrcomp",vthrcomp);
   fChain->SetBranchAddress("vibias_bus",vibias_bus);
   fChain->SetBranchAddress("vbias_sf",vbias_sf);
   fChain->SetBranchAddress("voffsetop",voffsetop);
   fChain->SetBranchAddress("vibiasop",vibiasop);
   fChain->SetBranchAddress("voffsetr0",voffsetr0);
   fChain->SetBranchAddress("vion",vion);
   fChain->SetBranchAddress("vibias_ph",vibias_ph);
   fChain->SetBranchAddress("ibias_dac",ibias_dac);
   fChain->SetBranchAddress("vibias_roc",vibias_roc);
   fChain->SetBranchAddress("vicolor",vicolor);
   fChain->SetBranchAddress("vnpix",vnpix);
   fChain->SetBranchAddress("vsumcol",vsumcol);
   fChain->SetBranchAddress("vcal",vcal);
   fChain->SetBranchAddress("caldel",caldel);
   fChain->SetBranchAddress("rangetemp",rangetemp);
   fChain->SetBranchAddress("ctrlreg",ctrlreg);
   fChain->SetBranchAddress("wbc",wbc);

   Notify();
}

Bool_t MyAnaTestResults::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normaly not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   // Get branch pointers
   b_nmod = fChain->GetBranch("nmod");
   b_grade = fChain->GetBranch("grade");
   b_finalGrade = fChain->GetBranch("finalGrade");
   b_overallGrade = fChain->GetBranch("overallGrade");
   b_shortGrade = fChain->GetBranch("shortGrade");
   b_halfModule = fChain->GetBranch("halfModule");
   b_allTestsDone = fChain->GetBranch("allTestsDone");
   b_date = fChain->GetBranch("date");
   b_hour = fChain->GetBranch("hour");
   b_minute = fChain->GetBranch("minute");
   b_tbmError1 = fChain->GetBranch("tbmError1");
   b_tbmError2 = fChain->GetBranch("tbmError2");
   b_ia = fChain->GetBranch("ia");
   b_id = fChain->GetBranch("id");
   b_va = fChain->GetBranch("va");
   b_vd = fChain->GetBranch("vd");
   b_iv100 = fChain->GetBranch("iv100");
   b_iv150 = fChain->GetBranch("iv150");
   b_ivSlope = fChain->GetBranch("ivSlope");
   b_ivv = fChain->GetBranch("ivv");
   b_ivi = fChain->GetBranch("ivi");
   b_temperatureVoltage = fChain->GetBranch("temperatureVoltage");
   b_nRocsB = fChain->GetBranch("nRocsB");
   b_nRocsC = fChain->GetBranch("nRocsC");
   b_trims = fChain->GetBranch("trims");
   b_uthrM = fChain->GetBranch("uthrM");
   b_uthrR = fChain->GetBranch("uthrR");
   b_uthr = fChain->GetBranch("uthr");
   b_tthrM = fChain->GetBranch("tthrM");
   b_tthrR = fChain->GetBranch("tthrR");
   b_tthr = fChain->GetBranch("tthr");
   b_bumpThrDiff = fChain->GetBranch("bumpThrDiff");
   b_noiseM = fChain->GetBranch("noiseM");
   b_noiseR = fChain->GetBranch("noiseR");
   b_noise = fChain->GetBranch("noise");
   b_gainM = fChain->GetBranch("gainM");
   b_gainR = fChain->GetBranch("gainR");
   b_pedM = fChain->GetBranch("pedM");
   b_pedR = fChain->GetBranch("pedR");
   b_ph = fChain->GetBranch("ph");
   b_gain = fChain->GetBranch("gain");
   b_ped = fChain->GetBranch("ped");
   b_addlvl = fChain->GetBranch("addlvl");
   b_pixmap = fChain->GetBranch("pixmap");
   b_defects = fChain->GetBranch("defects");
   b_vdig = fChain->GetBranch("vdig");
   b_vana = fChain->GetBranch("vana");
   b_vsf = fChain->GetBranch("vsf");
   b_vcomp = fChain->GetBranch("vcomp");
   b_vleak_comp = fChain->GetBranch("vleak_comp");
   b_vrgpr = fChain->GetBranch("vrgpr");
   b_vwllpr = fChain->GetBranch("vwllpr");
   b_vrgsh = fChain->GetBranch("vrgsh");
   b_vwllsh = fChain->GetBranch("vwllsh");
   b_vhlddel = fChain->GetBranch("vhlddel");
   b_vtrim = fChain->GetBranch("vtrim");
   b_vthrcomp = fChain->GetBranch("vthrcomp");
   b_vibias_bus = fChain->GetBranch("vibias_bus");
   b_vbias_sf = fChain->GetBranch("vbias_sf");
   b_voffsetop = fChain->GetBranch("voffsetop");
   b_vibiasop = fChain->GetBranch("vibiasop");
   b_voffsetr0 = fChain->GetBranch("voffsetr0");
   b_vion = fChain->GetBranch("vion");
   b_vibias_ph = fChain->GetBranch("vibias_ph");
   b_ibias_dac = fChain->GetBranch("ibias_dac");
   b_vibias_roc = fChain->GetBranch("vibias_roc");
   b_vicolor = fChain->GetBranch("vicolor");
   b_vnpix = fChain->GetBranch("vnpix");
   b_vsumcol = fChain->GetBranch("vsumcol");
   b_vcal = fChain->GetBranch("vcal");
   b_caldel = fChain->GetBranch("caldel");
   b_rangetemp = fChain->GetBranch("rangetemp");
   b_ctrlreg = fChain->GetBranch("ctrlreg");
   b_wbc = fChain->GetBranch("wbc");


   return kTRUE;
}

void MyAnaTestResults::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}

Int_t MyAnaTestResults::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
