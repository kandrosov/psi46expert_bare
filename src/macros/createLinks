#! /usr/bin/perl

# ----------------------------------------------------------------------
# Usage: createLinks -f book-keeping.dat -m path/moduleDB [-r] [-a] [-b] [-g {A,B,C}]
# -----
#        If '-r' is given, then retested modules will point to the retest
#        If the argument -g is missing, all grades will be sym-linked
#        Option [-h] should only be used without [-r]
#
# 23/03/07 read in (half) module type from T-10a/summaryTest.txt
# 22/03/07 changed half module options to [-a] and [-b]
# 07/02/07 added option [-t] for top and [-b] for bottom half modules
# 06/11/30 added option [-r] to replace tests with retests
# 06/11/28 migrated to kamor/moor
# 06/11/27 initial version
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('f:g:m:rba');

my $bFile;
my $rFile;
my $reqType;
my $hmType;
if ($opt_f) {
    $bFile = $opt_f;
} else {
    if ($opt_a) {
	$bFile = "/net/kamor/export/data3/moduleDB/book-keeping/half-module-tests.dat";
	$reqType = "a";
    }
    elsif ($opt_b) {
	$bFile = "/net/kamor/export/data3/moduleDB/book-keeping/half-module-tests.dat";
	$reqType = "b";
    }
    else{
	$bFile = "/net/kamor/export/data3/moduleDB/book-keeping/module-tests.dat";
	$reqType = "full-module";
	if (!-e "$bFile") {
	    die "File $bFile not found\n";
	}
    }
    $rFile = "/net/kamor/export/data3/moduleDB/book-keeping/retested-modules.dat";
}



my $mDB = "/net/kamor/export/data3/moduleDB";
if ($opt_m) {
    $mDB = $opt_m;
    if (!-d "$mDB") {
	die "Directory $mDB not found\n";
    }
}



my $gSelector;
if ($opt_g) {
    $gSelector = $opt_g;
    print "Selecting modules with grade $gSelector\n";
} else {
    $gSelector = "0";
    print "Selecting all grades\n";
}



# -- Create hash array of re-tested modules
my %retested; 
open(IN, "$rFile") || die "Cannot open file $rFile: $!\n";
while (<IN>) {
    chop;
    s/based on //g;
    ($mod, $fgrade, $dir, $ograde) = split(/ /);
    $retested{$mod} = "$dir"; 
    print "--> Adding retested $mod -> $mDB/$dir\n";
}
close IN; 


# -- Read in book-keeping.dat file for tested modules. If -r, then replace test directories with retested dirs
open(IN, "$bFile") || die "Cannot open file $bFile: $!\n";
while (<IN>) {
    # M0057 A based on M0057-060614.11:34 A
    chop;
    s/based on //g;
    ($mod, $fgrade, $dir, $ograde) = split(/ /);

    if ($opt_r && ($retested{$mod} ne "")) {
	print "==> module $mod, old: $mDB/$dir, retested: $mDB/$retested{$mod} \n";	    
	$dir = $retested{$mod};
    }

    if ($opt_a || $opt_b ) {
	getHalfModuleType();
    }
    else {
	$hmType = "full-module";
    }

    print "hm type $hmType\n";

    if ($dir) {
	if (-d "$mDB/$dir") {
	    if ($gSelector ne "0"){        # for specific grades
		if ($fgrade eq $gSelector) {
		    if ($hmType eq $reqType) {
			symlink("$mDB/$dir", $dir);
		    }
		    else {
			print "Not linking because it is a half module type $hmType, requested type is $reqType \n";
		    }
		} else {
		    print "Not linking $dir, because its grade is $fgrade != requested grade $gSelector\n";
		}
	    } else {                       # for all grades
		if ($hmType eq $reqType) {
		    symlink("$mDB/$dir", $dir);
		}
		else {
		    print "Not linking because it is a half module type $hmType, requested type is $reqType \n";
		}
	    }		
	} else {
	    print "Directory $mDB/$dir not found in $mDB\n";
	}
    } else {
	print "No directory associated with $mod\n";
    }

}


sub getHalfModuleType() {
    
    $hmType = "";
    
    print "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n";
    
    my $summaryFile =`ls -1 $mDB/$dir/T-10a/summaryTest.txt` ;
    chop($summaryFile);
    
    if ( -e "$summaryFile" ) {
	
	open(IN2, "$summaryFile") || die "Cannot open $summaryFile\n";
	
	while (<IN2>) {
	    
	    if (/Half-Module/) {
		
		s/Half-Module //g;
		$hmType = $_;
		chop($hmType);
	    }
	}
	
    }
    if ($hmType eq "Half-Module")
    {
	$hmType = "a";
    }
}
